"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
import environ


env = environ.Env()
environ.Env.read_env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = env("SECRET_KEY")
DEBUG = env.bool("DEBUG", default=True)


ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "accounts",
    "admin_app",
    "home",
    # third-party
    "rest_framework",
    "drf_yasg",
    "rest_framework_simplejwt",
    "django_filters",
    "django.contrib.sites",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {}
DB_TO_USE = env.str("DB_TO_USE", default="postgres")
if DB_TO_USE == "sqlite":
    DATABASES.update(
        {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }
    )
elif DB_TO_USE == "postgres":
    DATABASES.update(
        {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": env.str("DB_NAME"),
                "USER": env.str("DB_USER"),
                "PASSWORD": env.str("DB_PASSWORD"),
                "HOST": env.str("DB_HOST"),
                "PORT": env.str("DB_PORT"),
            }
        }
    )


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa:  E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # noqa:  E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # noqa:  E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # noqa:  E501
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = env("STATIC_URL")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "NON_FIELD_ERRORS_KEY": "error",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "accounts.paginations.CustomPagination",
   
}
HIRECODER_FEE = 0.05
EMAIL_BACKEND = env.str('EMAIL_BACKEND', default="anymail.backends.amazon_ses.EmailBackend")
DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL', default="no-reply@hirecoder.info")
ANYMAIL = {
    "AMAZON_SES_CLIENT_PARAMS": {
        "aws_access_key_id": env.str("AWS_ACCESS_KEY_FOR_ANYMAIL_SES"),
        "aws_secret_access_key": env.str("AWS_SECRET_KEY_FOR_ANYMAIL_SES"),
        "region_name": env.str('EMAIL_TIMEOUT', default="us-east-1"),
        "config": {
            "connect_timeout": env.str('EMAIL_TIMEOUT', default=30),
            "read_timeout": env.str('EMAIL_TIMEOUT', default=30),
        }
    },
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        days=env.int("SIMPLEJWT_ACCESS_TOKEN_LIFETIME", default=30)
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=env.int("SIMPLEJWT_REFRESH_TOKEN_LIFETIME", default=60)
    ),
}

SITE_ID = env.int("SITE_ID")
RATE_LIMIT_SECONDS = env.int("RATE_LIMIT_SECONDS")
VERIFICATION_TIMEOUT_MINUTES = env.int("VERIFICATION_TIMEOUT_MINUTES")
TOKEN_TIMEOUT_MINUTES = env.int("TOKEN_TIMEOUT_MINUTES")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
COMPANY_LOGOS_DIR = "company_logos"
PROFILE_PICTURES_PATH = os.path.join(MEDIA_ROOT, COMPANY_LOGOS_DIR)
CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', default=True)
CORS_ALLOW_CREDENTIALS = env.bool('CORS_ALLOW_CREDENTIALS', default=True)
MAX_DEGREE = env.int("MAX_DEGREE", default=5)
MAX_CERTIFICATE = env.int("MAX_CERTIFICATE", default=10)
DEFAULT_PAGE_SIZE = env.int("DEFAULT_PAGE_SIZE", default=5)
HIRECODER_FEE = 0.05
